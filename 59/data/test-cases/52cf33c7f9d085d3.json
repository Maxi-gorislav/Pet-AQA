{"uid":"52cf33c7f9d085d3","name":"Verify create multiple Pet","fullName":"core.pet.PetTests.verifyAddMultiplePets","historyId":"e066fb2ca9a6044b9e931aa685e8c739","time":{"start":1681378177431,"stop":1681378180259,"duration":2828},"description":"","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"passed","steps":[{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378177437,"stop":1681378177681,"duration":244},"status":"passed","steps":[],"attachments":[{"uid":"de7a5175f24649f8","name":"Request","source":"de7a5175f24649f8.html","type":"text/html","size":1331},{"uid":"f12186400872d26a","name":"HTTP/1.1 200 OK","source":"f12186400872d26a.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@223bc0b0"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378177682,"stop":1681378177686,"duration":4},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@33203453'","time":{"start":1681378177684,"stop":1681378177684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378177684,"stop":1681378177685,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378177685,"stop":1681378177685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378177685,"stop":1681378177685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@223bc0b0'","time":{"start":1681378177685,"stop":1681378177686,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@223bc0b0"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378177688,"stop":1681378177946,"duration":258},"status":"passed","steps":[],"attachments":[{"uid":"4259294a8b0bb4b1","name":"Request","source":"4259294a8b0bb4b1.html","type":"text/html","size":1331},{"uid":"fa5436df949332da","name":"HTTP/1.1 200 OK","source":"fa5436df949332da.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@61e77437"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378177946,"stop":1681378177952,"duration":6},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@199d5b11'","time":{"start":1681378177950,"stop":1681378177950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378177950,"stop":1681378177950,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378177950,"stop":1681378177950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378177950,"stop":1681378177950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@61e77437'","time":{"start":1681378177950,"stop":1681378177952,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@61e77437"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378177960,"stop":1681378178205,"duration":245},"status":"passed","steps":[],"attachments":[{"uid":"3db6c3d5c629686f","name":"Request","source":"3db6c3d5c629686f.html","type":"text/html","size":1331},{"uid":"6490f0f51750a11c","name":"HTTP/1.1 200 OK","source":"6490f0f51750a11c.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@504933bd"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378178205,"stop":1681378178218,"duration":13},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@b654657'","time":{"start":1681378178214,"stop":1681378178214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378178214,"stop":1681378178215,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378178215,"stop":1681378178215,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378178215,"stop":1681378178215,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@504933bd'","time":{"start":1681378178215,"stop":1681378178218,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@504933bd"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378178220,"stop":1681378178483,"duration":263},"status":"passed","steps":[],"attachments":[{"uid":"1c300a55b7209d12","name":"Request","source":"1c300a55b7209d12.html","type":"text/html","size":1331},{"uid":"e957fd4325d0f0d2","name":"HTTP/1.1 200 OK","source":"e957fd4325d0f0d2.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@6844e4ae"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378178484,"stop":1681378178487,"duration":3},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@48b52494'","time":{"start":1681378178486,"stop":1681378178486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378178486,"stop":1681378178487,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378178487,"stop":1681378178487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378178487,"stop":1681378178487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@6844e4ae'","time":{"start":1681378178487,"stop":1681378178487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@6844e4ae"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378178496,"stop":1681378178750,"duration":254},"status":"passed","steps":[],"attachments":[{"uid":"565ee5c6eaa9eab3","name":"Request","source":"565ee5c6eaa9eab3.html","type":"text/html","size":1331},{"uid":"ead4eb349af2ebf4","name":"HTTP/1.1 200 OK","source":"ead4eb349af2ebf4.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@13f16bc5"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378178750,"stop":1681378178754,"duration":4},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@4f7a62e1'","time":{"start":1681378178753,"stop":1681378178753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378178753,"stop":1681378178753,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378178753,"stop":1681378178753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378178753,"stop":1681378178753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@13f16bc5'","time":{"start":1681378178753,"stop":1681378178754,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@13f16bc5"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378178756,"stop":1681378179018,"duration":262},"status":"passed","steps":[],"attachments":[{"uid":"e374fc5d258940fd","name":"Request","source":"e374fc5d258940fd.html","type":"text/html","size":1331},{"uid":"a2972c9cd0cccf25","name":"HTTP/1.1 200 OK","source":"a2972c9cd0cccf25.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@4e8745e4"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378179018,"stop":1681378179025,"duration":7},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@2e904dea'","time":{"start":1681378179024,"stop":1681378179024,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378179024,"stop":1681378179024,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378179024,"stop":1681378179024,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378179024,"stop":1681378179024,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@4e8745e4'","time":{"start":1681378179024,"stop":1681378179025,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@4e8745e4"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378179029,"stop":1681378179248,"duration":219},"status":"passed","steps":[],"attachments":[{"uid":"2c79ab481e95eb80","name":"Request","source":"2c79ab481e95eb80.html","type":"text/html","size":1331},{"uid":"3454fa4b434cb7b6","name":"HTTP/1.1 200 OK","source":"3454fa4b434cb7b6.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@69380efc"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378179248,"stop":1681378179265,"duration":17},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@66636a9e'","time":{"start":1681378179264,"stop":1681378179264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378179264,"stop":1681378179264,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378179264,"stop":1681378179264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378179264,"stop":1681378179264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@69380efc'","time":{"start":1681378179264,"stop":1681378179265,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@69380efc"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378179271,"stop":1681378179547,"duration":276},"status":"passed","steps":[],"attachments":[{"uid":"607ce280777fa726","name":"Request","source":"607ce280777fa726.html","type":"text/html","size":1331},{"uid":"70148cee19e8723","name":"HTTP/1.1 200 OK","source":"70148cee19e8723.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@38e4fc69"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378179547,"stop":1681378179556,"duration":9},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@7adf9c8b'","time":{"start":1681378179553,"stop":1681378179553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378179553,"stop":1681378179553,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378179553,"stop":1681378179553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378179553,"stop":1681378179553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@38e4fc69'","time":{"start":1681378179553,"stop":1681378179556,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@38e4fc69"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378179559,"stop":1681378179802,"duration":243},"status":"passed","steps":[],"attachments":[{"uid":"7540164709955cd","name":"Request","source":"7540164709955cd.html","type":"text/html","size":1331},{"uid":"3d4302ddfde4b019","name":"HTTP/1.1 200 OK","source":"3d4302ddfde4b019.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@24140f70"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378179802,"stop":1681378179807,"duration":5},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@4259dcc7'","time":{"start":1681378179806,"stop":1681378179806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378179806,"stop":1681378179806,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378179806,"stop":1681378179806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378179806,"stop":1681378179806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@24140f70'","time":{"start":1681378179806,"stop":1681378179807,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@24140f70"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681378179811,"stop":1681378180027,"duration":216},"status":"passed","steps":[],"attachments":[{"uid":"2ef064ca55327e5e","name":"Request","source":"2ef064ca55327e5e.html","type":"text/html","size":1331},{"uid":"826681bd7006c2b8","name":"HTTP/1.1 200 OK","source":"826681bd7006c2b8.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@31ce6ce4"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681378180027,"stop":1681378180031,"duration":4},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@1c17f3e6'","time":{"start":1681378180030,"stop":1681378180030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681378180030,"stop":1681378180030,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681378180030,"stop":1681378180030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681378180030,"stop":1681378180030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@31ce6ce4'","time":{"start":1681378180030,"stop":1681378180031,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@31ce6ce4"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854775807","time":{"start":1681378180031,"stop":1681378180259,"duration":228},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854775807"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":71,"attachmentsCount":20,"shouldDisplayMessage":false,"hasContent":true},"afterStages":[],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:core.pet.PetTests]/[method:verifyAddMultiplePets()]"},{"name":"host","value":"fv-az408-955"},{"name":"thread","value":"2572@fv-az408-955.ForkJoinPool-1-worker-51(15)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"core.pet.PetTests"},{"name":"testClass","value":"core.pet.PetTests"},{"name":"testMethod","value":"verifyAddMultiplePets"},{"name":"suite","value":"[Pet tests]"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"allure","type":"mylink"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"daed7165e89fc9cc","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/58//#testresult/daed7165e89fc9cc","status":"passed","time":{"start":1681295732020,"stop":1681295736650,"duration":4630}},{"uid":"19b8653a4062680","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/57//#testresult/19b8653a4062680","status":"broken","statusDetails":"Cannot create property=shoppingPath for JavaBean=CoreConfig(hostUrl=https://demo-opencart.com/, adminUiUrl=https://demo-opencart.com/admin, amadeusUrl=https://test.api.amadeus.com, checkInLink=null, petPath=null, petUrl=null, clientId=null, secretKey=null)\n in 'reader', line 2, column 1:\n    hostUrl: https://demo-opencart.com/\n    ^\nUnable to find property 'shoppingPath' on class: config.CoreConfig\n in 'reader', line 6, column 15:\n    shoppingPath: /v2/reference-data/urls\n                  ^\n","time":{"start":1681295216297,"stop":1681295216318,"duration":21}},{"uid":"88b39e879d74e57b","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/56//#testresult/88b39e879d74e57b","status":"passed","time":{"start":1681294656524,"stop":1681294658508,"duration":1984}}]},"tags":[]},"source":"52cf33c7f9d085d3.json","parameterValues":[]}