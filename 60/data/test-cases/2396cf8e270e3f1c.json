{"uid":"2396cf8e270e3f1c","name":"Verify create multiple Pet","fullName":"core.pet.PetTests.verifyAddMultiplePets","historyId":"e066fb2ca9a6044b9e931aa685e8c739","time":{"start":1681763509520,"stop":1681763510920,"duration":1400},"description":"","status":"failed","statusMessage":"Status code of clean up404 ==> expected: <200> but was: <404>","statusTrace":"org.opentest4j.AssertionFailedError: Status code of clean up404 ==> expected: <200> but was: <404>\n\tat org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\n\tat org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:559)\n\tat helper.clean_up.CleanUpExtension.deletePetById(CleanUpExtension.java:44)\n\tat helper.clean_up.CleanUpExtension.afterEach(CleanUpExtension.java:27)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterEachCallbacks$12(TestMethodTestDescriptor.java:257)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:273)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$14(TestMethodTestDescriptor.java:273)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:272)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterEachCallbacks(TestMethodTestDescriptor.java:256)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:141)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:189)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)\n","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"Status code of clean up404 ==> expected: <200> but was: <404>","statusTrace":"org.opentest4j.AssertionFailedError: Status code of clean up404 ==> expected: <200> but was: <404>\n\tat org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\n\tat org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:559)\n\tat helper.clean_up.CleanUpExtension.deletePetById(CleanUpExtension.java:44)\n\tat helper.clean_up.CleanUpExtension.afterEach(CleanUpExtension.java:27)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterEachCallbacks$12(TestMethodTestDescriptor.java:257)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:273)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$14(TestMethodTestDescriptor.java:273)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:272)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterEachCallbacks(TestMethodTestDescriptor.java:256)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:141)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:189)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)\n","steps":[{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763509526,"stop":1681763509619,"duration":93},"status":"passed","steps":[],"attachments":[{"uid":"e6131904c6b0c418","name":"Request","source":"e6131904c6b0c418.html","type":"text/html","size":1331},{"uid":"dfff5126b2008b0","name":"HTTP/1.1 200 OK","source":"dfff5126b2008b0.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@5d898b6a"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763509619,"stop":1681763509627,"duration":8},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@279b46da'","time":{"start":1681763509626,"stop":1681763509626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763509626,"stop":1681763509626,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763509626,"stop":1681763509626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763509626,"stop":1681763509626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@5d898b6a'","time":{"start":1681763509626,"stop":1681763509627,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@5d898b6a"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763509630,"stop":1681763509724,"duration":94},"status":"passed","steps":[],"attachments":[{"uid":"c2628c2ad5c2917f","name":"Request","source":"c2628c2ad5c2917f.html","type":"text/html","size":1331},{"uid":"1608739870bef0f","name":"HTTP/1.1 200 OK","source":"1608739870bef0f.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@d22ce4b"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763509724,"stop":1681763509736,"duration":12},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@7605d4ce'","time":{"start":1681763509732,"stop":1681763509732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763509732,"stop":1681763509736,"duration":4},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763509735,"stop":1681763509736,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763509736,"stop":1681763509736,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@d22ce4b'","time":{"start":1681763509736,"stop":1681763509736,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@d22ce4b"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763509746,"stop":1681763509832,"duration":86},"status":"passed","steps":[],"attachments":[{"uid":"a88ea9efa65a4ccc","name":"Request","source":"a88ea9efa65a4ccc.html","type":"text/html","size":1331},{"uid":"cb420a9aa387ee75","name":"HTTP/1.1 200 OK","source":"cb420a9aa387ee75.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@8022d6d"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763509832,"stop":1681763509845,"duration":13},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@1cf78c36'","time":{"start":1681763509835,"stop":1681763509835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763509835,"stop":1681763509835,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763509835,"stop":1681763509835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763509835,"stop":1681763509835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@8022d6d'","time":{"start":1681763509835,"stop":1681763509845,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@8022d6d"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763509848,"stop":1681763509995,"duration":147},"status":"passed","steps":[],"attachments":[{"uid":"7e88c0f10bdc5326","name":"Request","source":"7e88c0f10bdc5326.html","type":"text/html","size":1331},{"uid":"ffc149f51059376d","name":"HTTP/1.1 200 OK","source":"ffc149f51059376d.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@59f8b8c9"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763509995,"stop":1681763510009,"duration":14},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@7a2b8599'","time":{"start":1681763510007,"stop":1681763510007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510008,"stop":1681763510008,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510008,"stop":1681763510008,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510008,"stop":1681763510009,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@59f8b8c9'","time":{"start":1681763510009,"stop":1681763510009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@59f8b8c9"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763510016,"stop":1681763510167,"duration":151},"status":"passed","steps":[],"attachments":[{"uid":"911685f98aebecfb","name":"Request","source":"911685f98aebecfb.html","type":"text/html","size":1331},{"uid":"45feea6d1469eb0","name":"HTTP/1.1 200 OK","source":"45feea6d1469eb0.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@1a105500"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763510167,"stop":1681763510180,"duration":13},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@5745f561'","time":{"start":1681763510175,"stop":1681763510175,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510175,"stop":1681763510176,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510176,"stop":1681763510176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510176,"stop":1681763510176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@1a105500'","time":{"start":1681763510176,"stop":1681763510180,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@1a105500"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763510189,"stop":1681763510296,"duration":107},"status":"passed","steps":[],"attachments":[{"uid":"7981a63d929d742","name":"Request","source":"7981a63d929d742.html","type":"text/html","size":1331},{"uid":"b0d2693edb192be2","name":"HTTP/1.1 200 OK","source":"b0d2693edb192be2.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@23c248ff"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763510296,"stop":1681763510301,"duration":5},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@58b14a14'","time":{"start":1681763510299,"stop":1681763510299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510299,"stop":1681763510300,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510300,"stop":1681763510300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510300,"stop":1681763510300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@23c248ff'","time":{"start":1681763510300,"stop":1681763510301,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@23c248ff"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763510307,"stop":1681763510438,"duration":131},"status":"passed","steps":[],"attachments":[{"uid":"410c51a6fa161754","name":"Request","source":"410c51a6fa161754.html","type":"text/html","size":1331},{"uid":"bdef9cf750798610","name":"HTTP/1.1 200 OK","source":"bdef9cf750798610.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@36b4d9c2"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763510438,"stop":1681763510470,"duration":32},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@8409911'","time":{"start":1681763510464,"stop":1681763510464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510464,"stop":1681763510465,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510465,"stop":1681763510465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510465,"stop":1681763510465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@36b4d9c2'","time":{"start":1681763510465,"stop":1681763510470,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@36b4d9c2"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763510483,"stop":1681763510625,"duration":142},"status":"passed","steps":[],"attachments":[{"uid":"d31f34c28631dd3b","name":"Request","source":"d31f34c28631dd3b.html","type":"text/html","size":1331},{"uid":"6c3cf8377cf78e66","name":"HTTP/1.1 200 OK","source":"6c3cf8377cf78e66.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@3e6c37a6"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763510633,"stop":1681763510641,"duration":8},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@c0e4daa'","time":{"start":1681763510640,"stop":1681763510640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510640,"stop":1681763510640,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510640,"stop":1681763510640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510640,"stop":1681763510640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@3e6c37a6'","time":{"start":1681763510640,"stop":1681763510641,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@3e6c37a6"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763510648,"stop":1681763510778,"duration":130},"status":"passed","steps":[],"attachments":[{"uid":"468d6cc824141484","name":"Request","source":"468d6cc824141484.html","type":"text/html","size":1331},{"uid":"c2870c04cf44cf0","name":"HTTP/1.1 200 OK","source":"c2870c04cf44cf0.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@46af1f2b"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763510778,"stop":1681763510791,"duration":13},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@798a21d'","time":{"start":1681763510790,"stop":1681763510790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510790,"stop":1681763510790,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510790,"stop":1681763510790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510791,"stop":1681763510791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@46af1f2b'","time":{"start":1681763510791,"stop":1681763510791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@46af1f2b"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681763510793,"stop":1681763510868,"duration":75},"status":"passed","steps":[],"attachments":[{"uid":"849240255e5001b3","name":"Request","source":"849240255e5001b3.html","type":"text/html","size":1331},{"uid":"72027d1ba82abe00","name":"HTTP/1.1 200 OK","source":"72027d1ba82abe00.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@761132a9"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681763510868,"stop":1681763510871,"duration":3},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@13249ecb'","time":{"start":1681763510871,"stop":1681763510871,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681763510871,"stop":1681763510871,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681763510871,"stop":1681763510871,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681763510871,"stop":1681763510871,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@761132a9'","time":{"start":1681763510871,"stop":1681763510871,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@761132a9"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854622716","time":{"start":1681763510872,"stop":1681763510919,"duration":47},"status":"failed","statusMessage":"Status code of clean up404 ==> expected: <200> but was: <404>","statusTrace":"org.opentest4j.AssertionFailedError: Status code of clean up404 ==> expected: <200> but was: <404>\n\tat org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\n\tat org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:559)\n\tat helper.clean_up.CleanUpExtension.deletePetById(CleanUpExtension.java:44)\n\tat helper.clean_up.CleanUpExtension.afterEach(CleanUpExtension.java:27)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterEachCallbacks$12(TestMethodTestDescriptor.java:257)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:273)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$14(TestMethodTestDescriptor.java:273)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:272)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterEachCallbacks(TestMethodTestDescriptor.java:256)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:141)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\n\tat java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:189)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)\n","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854622716"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":71,"attachmentsCount":20,"shouldDisplayMessage":false,"hasContent":true},"afterStages":[],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:core.pet.PetTests]/[method:verifyAddMultiplePets()]"},{"name":"host","value":"fv-az410-934"},{"name":"thread","value":"2554@fv-az410-934.ForkJoinPool-1-worker-51(15)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"core.pet.PetTests"},{"name":"testClass","value":"core.pet.PetTests"},{"name":"testMethod","value":"verifyAddMultiplePets"},{"name":"suite","value":"[Pet tests]"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"allure","type":"mylink"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":5},"items":[{"uid":"52cf33c7f9d085d3","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/59//#testresult/52cf33c7f9d085d3","status":"passed","time":{"start":1681378177431,"stop":1681378180259,"duration":2828}},{"uid":"daed7165e89fc9cc","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/58//#testresult/daed7165e89fc9cc","status":"passed","time":{"start":1681295732020,"stop":1681295736650,"duration":4630}},{"uid":"19b8653a4062680","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/57//#testresult/19b8653a4062680","status":"broken","statusDetails":"Cannot create property=shoppingPath for JavaBean=CoreConfig(hostUrl=https://demo-opencart.com/, adminUiUrl=https://demo-opencart.com/admin, amadeusUrl=https://test.api.amadeus.com, checkInLink=null, petPath=null, petUrl=null, clientId=null, secretKey=null)\n in 'reader', line 2, column 1:\n    hostUrl: https://demo-opencart.com/\n    ^\nUnable to find property 'shoppingPath' on class: config.CoreConfig\n in 'reader', line 6, column 15:\n    shoppingPath: /v2/reference-data/urls\n                  ^\n","time":{"start":1681295216297,"stop":1681295216318,"duration":21}},{"uid":"88b39e879d74e57b","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/56//#testresult/88b39e879d74e57b","status":"passed","time":{"start":1681294656524,"stop":1681294658508,"duration":1984}}]},"tags":[]},"source":"2396cf8e270e3f1c.json","parameterValues":[]}