{"uid":"55396fde1618173c","name":"Verify create multiple Pet","fullName":"core.pet.PetTests.verifyAddMultiplePets","historyId":"e066fb2ca9a6044b9e931aa685e8c739","time":{"start":1681817156188,"stop":1681817161087,"duration":4899},"description":"","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":true,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"passed","steps":[{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817156207,"stop":1681817156516,"duration":309},"status":"passed","steps":[],"attachments":[{"uid":"bfeb6ce9396da7f9","name":"Request","source":"bfeb6ce9396da7f9.html","type":"text/html","size":1331},{"uid":"717a17fc5b32ad80","name":"HTTP/1.1 200 OK","source":"717a17fc5b32ad80.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@3627b41b"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817156517,"stop":1681817156535,"duration":18},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@373f30bc'","time":{"start":1681817156534,"stop":1681817156534,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817156534,"stop":1681817156534,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817156534,"stop":1681817156534,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817156534,"stop":1681817156534,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@3627b41b'","time":{"start":1681817156534,"stop":1681817156535,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@3627b41b"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817156537,"stop":1681817156812,"duration":275},"status":"passed","steps":[],"attachments":[{"uid":"a8b9b25fad123f7a","name":"Request","source":"a8b9b25fad123f7a.html","type":"text/html","size":1331},{"uid":"6f3f7cdea125790","name":"HTTP/1.1 200 OK","source":"6f3f7cdea125790.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@124a81b8"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817156812,"stop":1681817156832,"duration":20},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@7ea421cb'","time":{"start":1681817156831,"stop":1681817156831,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817156831,"stop":1681817156832,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817156832,"stop":1681817156832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817156832,"stop":1681817156832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@124a81b8'","time":{"start":1681817156832,"stop":1681817156832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@124a81b8"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817156843,"stop":1681817157101,"duration":258},"status":"passed","steps":[],"attachments":[{"uid":"3af71a9a1435a7ca","name":"Request","source":"3af71a9a1435a7ca.html","type":"text/html","size":1331},{"uid":"682f28ffbbf67b50","name":"HTTP/1.1 200 OK","source":"682f28ffbbf67b50.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@415c33f5"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817157102,"stop":1681817157113,"duration":11},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@7b8385ca'","time":{"start":1681817157105,"stop":1681817157105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817157105,"stop":1681817157105,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817157105,"stop":1681817157105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817157105,"stop":1681817157105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@415c33f5'","time":{"start":1681817157105,"stop":1681817157113,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@415c33f5"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817157115,"stop":1681817157417,"duration":302},"status":"passed","steps":[],"attachments":[{"uid":"a78e97960040e848","name":"Request","source":"a78e97960040e848.html","type":"text/html","size":1331},{"uid":"d7ab6a7b3e7355c1","name":"HTTP/1.1 200 OK","source":"d7ab6a7b3e7355c1.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@13107abb"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817157418,"stop":1681817157421,"duration":3},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@6bb66d85'","time":{"start":1681817157420,"stop":1681817157420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817157420,"stop":1681817157421,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817157421,"stop":1681817157421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817157421,"stop":1681817157421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@13107abb'","time":{"start":1681817157421,"stop":1681817157421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@13107abb"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817157437,"stop":1681817157705,"duration":268},"status":"passed","steps":[],"attachments":[{"uid":"cdfd08a8bc9d8051","name":"Request","source":"cdfd08a8bc9d8051.html","type":"text/html","size":1331},{"uid":"a2e1f5fead2f1a5f","name":"HTTP/1.1 200 OK","source":"a2e1f5fead2f1a5f.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@620c02aa"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817157715,"stop":1681817157735,"duration":20},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@655e758b'","time":{"start":1681817157730,"stop":1681817157730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817157730,"stop":1681817157731,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817157730,"stop":1681817157731,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817157731,"stop":1681817157731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@620c02aa'","time":{"start":1681817157731,"stop":1681817157735,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@620c02aa"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817157742,"stop":1681817158019,"duration":277},"status":"passed","steps":[],"attachments":[{"uid":"5894af4cdd134906","name":"Request","source":"5894af4cdd134906.html","type":"text/html","size":1331},{"uid":"cf61fd7cb298a78c","name":"HTTP/1.1 200 OK","source":"cf61fd7cb298a78c.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@6077a950"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817158020,"stop":1681817158038,"duration":18},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@14e60b7c'","time":{"start":1681817158035,"stop":1681817158035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817158035,"stop":1681817158035,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817158035,"stop":1681817158035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817158035,"stop":1681817158036,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@6077a950'","time":{"start":1681817158036,"stop":1681817158038,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@6077a950"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817158044,"stop":1681817158312,"duration":268},"status":"passed","steps":[],"attachments":[{"uid":"5f892a83da8c43c7","name":"Request","source":"5f892a83da8c43c7.html","type":"text/html","size":1331},{"uid":"8c469f9ffa2c1fe6","name":"HTTP/1.1 200 OK","source":"8c469f9ffa2c1fe6.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@574c2936"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817158313,"stop":1681817158322,"duration":9},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@475586eb'","time":{"start":1681817158321,"stop":1681817158321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817158321,"stop":1681817158321,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817158321,"stop":1681817158321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817158321,"stop":1681817158321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@574c2936'","time":{"start":1681817158321,"stop":1681817158322,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@574c2936"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817158327,"stop":1681817158564,"duration":237},"status":"passed","steps":[],"attachments":[{"uid":"2574646f85dcae66","name":"Request","source":"2574646f85dcae66.html","type":"text/html","size":1331},{"uid":"ba0e347d09b2efd8","name":"HTTP/1.1 200 OK","source":"ba0e347d09b2efd8.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@608f8739"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817158565,"stop":1681817158568,"duration":3},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@6e3e2046'","time":{"start":1681817158567,"stop":1681817158567,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817158567,"stop":1681817158568,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817158568,"stop":1681817158568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817158568,"stop":1681817158568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@608f8739'","time":{"start":1681817158568,"stop":1681817158568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@608f8739"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817158571,"stop":1681817158795,"duration":224},"status":"passed","steps":[],"attachments":[{"uid":"6b97de1eeff55bfd","name":"Request","source":"6b97de1eeff55bfd.html","type":"text/html","size":1331},{"uid":"5462bd3fdaf72d79","name":"HTTP/1.1 200 OK","source":"5462bd3fdaf72d79.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@5cde240e"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817158795,"stop":1681817158799,"duration":4},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@41529d3a'","time":{"start":1681817158797,"stop":1681817158797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817158797,"stop":1681817158798,"duration":1},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817158798,"stop":1681817158798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817158798,"stop":1681817158798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@5cde240e'","time":{"start":1681817158798,"stop":1681817158799,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@5cde240e"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Add new Pet {PetDTO.name}","time":{"start":1681817158801,"stop":1681817159037,"duration":236},"status":"passed","steps":[],"attachments":[{"uid":"29bab0444b783b50","name":"Request","source":"29bab0444b783b50.html","type":"text/html","size":1331},{"uid":"1d2b0598ec977475","name":"HTTP/1.1 200 OK","source":"1d2b0598ec977475.html","type":"text/html","size":1024}],"parameters":[{"name":"pet","value":"entities.dto.pet.PetDTO@59d708e"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Expected response value equals to Policy Plan: 'doggie'","time":{"start":1681817159037,"stop":1681817159044,"duration":7},"status":"passed","steps":[{"name":"assertThat 'entities.dto.pet.PetDTO@29c157e2'","time":{"start":1681817159041,"stop":1681817159041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"usingRecursiveComparison","time":{"start":1681817159041,"stop":1681817159041,"duration":0},"status":"passed","steps":[{"name":"usingRecursiveComparison '- no overridden equals methods were used in the comparison (except for java types)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n'","time":{"start":1681817159041,"stop":1681817159041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"ignoringFields '[id]'","time":{"start":1681817159041,"stop":1681817159041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"isEqualTo 'entities.dto.pet.PetDTO@59d708e'","time":{"start":1681817159041,"stop":1681817159044,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[{"name":"expected","value":"entities.dto.pet.PetDTO@59d708e"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410650","time":{"start":1681817159044,"stop":1681817159250,"duration":206},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410650"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410651","time":{"start":1681817159251,"stop":1681817159450,"duration":199},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410651"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410648","time":{"start":1681817159450,"stop":1681817159647,"duration":197},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410648"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410649","time":{"start":1681817159647,"stop":1681817159847,"duration":200},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410649"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410652","time":{"start":1681817159847,"stop":1681817160055,"duration":208},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410652"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410643","time":{"start":1681817160055,"stop":1681817160255,"duration":200},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410643"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410646","time":{"start":1681817160255,"stop":1681817160457,"duration":202},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410646"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410647","time":{"start":1681817160457,"stop":1681817160691,"duration":234},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410647"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410644","time":{"start":1681817160691,"stop":1681817160889,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410644"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Delete pet by id: 9223372036854410645","time":{"start":1681817160889,"stop":1681817161087,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"id","value":"9223372036854410645"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":80,"attachmentsCount":20,"shouldDisplayMessage":false,"hasContent":true},"afterStages":[],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:core.pet.PetTests]/[method:verifyAddMultiplePets()]"},{"name":"host","value":"fv-az247-842"},{"name":"thread","value":"2569@fv-az247-842.ForkJoinPool-1-worker-51(15)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"core.pet.PetTests"},{"name":"testClass","value":"core.pet.PetTests"},{"name":"testMethod","value":"verifyAddMultiplePets"},{"name":"suite","value":"[Pet tests]"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"allure","type":"mylink"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":4,"unknown":0,"total":7},"items":[{"uid":"461baf7cd9ae10f2","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/61//#testresult/461baf7cd9ae10f2","status":"failed","statusDetails":"Status code of clean up404 ==> expected: <200> but was: <404>","time":{"start":1681815176156,"stop":1681815181678,"duration":5522}},{"uid":"2396cf8e270e3f1c","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/60//#testresult/2396cf8e270e3f1c","status":"failed","statusDetails":"Status code of clean up404 ==> expected: <200> but was: <404>","time":{"start":1681763509520,"stop":1681763510920,"duration":1400}},{"uid":"52cf33c7f9d085d3","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/59//#testresult/52cf33c7f9d085d3","status":"passed","time":{"start":1681378177431,"stop":1681378180259,"duration":2828}},{"uid":"daed7165e89fc9cc","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/58//#testresult/daed7165e89fc9cc","status":"passed","time":{"start":1681295732020,"stop":1681295736650,"duration":4630}},{"uid":"19b8653a4062680","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/57//#testresult/19b8653a4062680","status":"broken","statusDetails":"Cannot create property=shoppingPath for JavaBean=CoreConfig(hostUrl=https://demo-opencart.com/, adminUiUrl=https://demo-opencart.com/admin, amadeusUrl=https://test.api.amadeus.com, checkInLink=null, petPath=null, petUrl=null, clientId=null, secretKey=null)\n in 'reader', line 2, column 1:\n    hostUrl: https://demo-opencart.com/\n    ^\nUnable to find property 'shoppingPath' on class: config.CoreConfig\n in 'reader', line 6, column 15:\n    shoppingPath: /v2/reference-data/urls\n                  ^\n","time":{"start":1681295216297,"stop":1681295216318,"duration":21}},{"uid":"88b39e879d74e57b","reportUrl":"https://Maxi-gorislav.github.io/Pet-AQA/56//#testresult/88b39e879d74e57b","status":"passed","time":{"start":1681294656524,"stop":1681294658508,"duration":1984}}]},"tags":[]},"source":"55396fde1618173c.json","parameterValues":[]}